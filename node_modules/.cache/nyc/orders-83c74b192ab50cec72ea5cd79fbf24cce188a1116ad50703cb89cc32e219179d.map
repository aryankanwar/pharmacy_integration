{"version":3,"file":"/Users/aryankanwar/Desktop/LockebIO/src/controllers/orders.ts","sources":["/Users/aryankanwar/Desktop/LockebIO/src/controllers/orders.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,+DAA8D;AAC9D,gDAA0B;AAG1B,IAAM,QAAQ,GAAa,+EAA+E,CAAC;AAE3G,mEAAmE;AACnE,SAAS,kBAAkB,CAAC,QAAgB;IACxC,OAAO,IAAI,2CAAoB,CAAC,QAAQ,CAAC,CAAC;AAC9C,CAAC;AAGD,8CAA8C;AAEvC,IAAM,WAAW,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBACnD,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAC/B,IAAI,GAAiB,GAAG,CAAC,IAAI,CAAC;gBAE9B,OAAO,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;gBACvC,KAAK,GAAK,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;gBAEzB,qBAAM,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAE,UAAG,QAAQ,YAAS,EAAE,KAAK,CAAC,EAAA;;gBAAlE,QAAQ,GAAG,SAAuD;gBAElE,YAAY,GAAG;oBACjB,MAAM,EAAE,QAAQ,CAAC,MAAM;oBACvB,IAAI,EAAE,QAAQ,CAAC,IAAI;iBACtB,CAAC;gBACF,WAAW;gBACX,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;;;;KACtC,CAAC;AAfW,QAAA,WAAW,eAetB;AAEF,2CAA2C;AAEpC,IAAM,QAAQ,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;;gBAG5C,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;gBACpB,qBAAM,eAAK,CAAC,GAAG,CAAC,QAAQ,GAAE,UAAG,QAAQ,YAAS,CAAC,EAAA;;gBAA1D,QAAQ,GAAG,SAA+C;gBAE1D,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC;gBACjC,4CAA4C;gBAC5C,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,UAAU,YAAA,EAAE,CAAC,CAAC;;;;gBAErC,kBAAkB;gBAClB,OAAO,CAAC,KAAK,CAAC,wBAAwB,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;gBACvD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,CAAC;;;;;KAEhE,CAAC;AAdW,QAAA,QAAQ,YAcnB;AAEF,2CAA2C;AACpC,IAAM,YAAY,GAAG,UAAO,GAAY,EAAE,GAAa;;;;;gBACpD,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC;gBAC/B,OAAO,GAAG,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC;;;;gBAGd,qBAAM,eAAK,CAAC,GAAG,CAAC,QAAQ,GAAC,UAAG,QAAQ,qBAAW,OAAO,CAAE,CAAC,EAAA;;gBAApE,QAAQ,GAAG,SAAyD;gBAEpE,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC;gBAC5B,uCAAuC;gBACvC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;;;;gBAEhC,kBAAkB;gBAClB,OAAO,CAAC,KAAK,CAAC,wCAAwC,EAAE,OAAK,CAAC,OAAO,CAAC,CAAC;gBACvE,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,iBAAiB,EAAE,CAAC,CAAC;;;;;KAE1D,CAAC;AAfW,QAAA,YAAY,gBAevB","sourcesContent":["// src/controllers/orderController.ts\nimport { Request, Response, Router } from 'express';\nimport { PharmacyOrderHandler } from './pharmacyOrderHandler';\nimport axios from 'axios';\nimport {OrderPayload} from '../interfaces/orderInterfaces';\n\nconst BASE_URL           = 'http://pharmacy-mock-service-env.eba-xzj3bbnm.us-east-1.elasticbeanstalk.com/';\n\n// Factory function to create order handlers based on pharmacy type\nfunction createOrderHandler(pharmacy: string) {\n    return new PharmacyOrderHandler(pharmacy);\n}\n\n\n// Function to create a  orders of a pharamacy\n\nexport const createOrder = async (req: Request, res: Response) => {\n    const pharmacy = req.params.pharmacy;\n    const data: OrderPayload = req.body;\n    // Create order handler based on pharmacy type\n    const handler = createOrderHandler(pharmacy);\n    const order   = handler.createOrder(data);\n    // Create order using the appropriate handler\n    const response = await axios.post(BASE_URL +`${pharmacy}/orders`, order);\n  // Extract relevant data from the response\n    const responseData = {\n        status: response.status,\n        data: response.data\n    };\n    // Response\n    res.status(201).json(responseData);\n};\n\n// Function to get a  orders of a pharamacy\n\nexport const getOrder = async (req: Request, res: Response) => {\n    try {\n        // Sending GET request to retrieve pharmacies\n        const pharmacy = req.params.pharmacy;\n        const response = await axios.get(BASE_URL +`${pharmacy}/orders`);\n        // Extracting data from the response\n        const pharmacies = response.data;\n        // Sending response with the pharmacies data\n        res.status(200).json({ pharmacies });\n    } catch (error) {\n        // Handling errors\n        console.error('Error fetching orders:', error.message);\n        res.status(500).json({ error: 'Internal server error' });\n    }\n};\n\n// Function to get a  order by its order ID\nexport const getOrderById = async (req: Request, res: Response) => {\n    const pharmacy = req.params.pharmacy;\n    const orderId = req.params.orderId;\n    try {\n        // Sending GET request to retrieve HealthMart order by ID\n        const response = await axios.get(BASE_URL+`${pharmacy}/orders/${orderId}`);\n        // Extracting data from the response\n        const order = response.data;\n        // Sending response with the order data\n        res.status(200).json({ order });\n    } catch (error) {\n        // Handling errors\n        console.error('Error fetching HealthMart order by ID:', error.message);\n        res.status(404).json({ error: 'Order not found' });\n    }\n};\n"]}